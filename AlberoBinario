#include <iostream>
using namespace std;

template <typename T>
class AlberoBinario {
private:
    T nodi[100];
    bool occupato[100] = {false};

public:
    AlberoBinario() {
        // Inizializzazione dell'albero
    }

    bool alberoVuoto() const {
        return !occupato[0]; // Controlla se la radice è vuota
    }

    void insRadice(const T& valore) {
        if (!occupato[0]) {
            nodi[0] = valore;
            occupato[0] = true;
        } else {
            cout << "La radice esiste già!" << endl;
        }
    }

    T radice() const {
        if (occupato[0]) {
            return nodi[0];
        } else {
            cout << "L'albero è vuoto." << endl;
            return T();
        }
    }

    bool isFoglia(int indice) const {
        if (!occupato[indice]) {
            cout << "Indice non valido." << endl;
            return false;
        }
        return !occupato[2 * indice + 1] && !occupato[2 * indice + 2];
    }

    void insFiglioSinistro(int indice, const T& valore) {
        int fs = 2 * indice + 1;
        if (occupato[indice] && !occupato[fs]) {
            nodi[fs] = valore;
            occupato[fs] = true;
        } else {
            cout << "Impossibile aggiungere il figlio sinistro." << endl;
        }
    }

    void insFiglioDestro(int indice, const T& valore) {
        int fd = 2 * indice + 2;
        if (occupato[indice] && !occupato[fd]) {
            nodi[fd] = valore;
            occupato[fd] = true;
        } else {
            cout << "Impossibile aggiungere il figlio destro." << endl;
        }
    }

    void rimuovi(int indice) {
        if (occupato[indice] && isFoglia(indice)) {
            occupato[indice] = false;
        } else {
            cout << "Non si può rimuovere il nodo." << endl;
        }
    }

    void stampa() const {
        for (int i = 0; i < 100; ++i) {
            if (occupato[i]) {
                cout << "Posizione " << i << ", Valore: " << nodi[i];
                cout << ", Figlio sinistro: " << (occupato[2 * i + 1] ? to_string(nodi[2 * i + 1]) : "NULL");
                cout << ", Figlio destro: " << (occupato[2 * i + 2] ? to_string(nodi[2 * i + 2]) : "NULL") << endl;
            }
        }
    }
};

int main() {
    AlberoBinario<int> albero;

    albero.insRadice(10);
    albero.insFiglioSinistro(0, 5);
    albero.insFiglioDestro(0, 15);

    albero.stampa();

    if (albero.isFoglia(1)) {
        cout << "Il nodo all'indice 1 è una foglia." << endl;
    }

    albero.rimuovi(1);

    albero.stampa();

    return 0;
}
